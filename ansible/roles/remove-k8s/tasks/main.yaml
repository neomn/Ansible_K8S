---
- include_tasks: ./common.yaml  
- include_tasks: ./remove-worker-nodes.yaml  
- include_tasks: ./remove-master-nodes.yaml  
- include_tasks: ./remove-last-master-node.yaml
  
   
- name: remove iptable rules applied by k8s on master nodes
- name: drain master nodes except the one which runs drain command
- name: kubeadm reset 
- name: remove the rest files and directories which kubeadm does not delete
- name: remove k8s components
- name: remove master nodes 

# tasks for the last master node 
- name: remove iptable rules applied by k8s on master nodes
- name: drain master nodes except the one which runs drain command
- name: kubeadm reset 
- name: remove the rest files and directories which kubeadm does not delete
- name: remove k8s components
- name: remove master nodes 

- name: Stop and disable kubelet on worker nodes
  systemd:
    name: kubelet
    state: stopped
    enabled: no
  when: inventory_hostname in groups['workers']

- name: Remove Kubernetes components from worker nodes
  package:
    name:
      - kubeadm
      - kubelet
      - kubectl
    state: absent
  when: inventory_hostname in groups['workers']

# - name: Remove worker nodes from cluster
#   command: kubectl delete node {{ item }}
#   when: inventory_hostname == groups['kube_control_plane'][0]
#   loop: "{{ groups['kube_node'] }}"
#
# - name: Drain master nodes (except remaining master)
#   command: kubectl drain {{ item }} --ignore-daemonsets --delete-emptydir-data
#   delegate_to: "{{ remaining_master }}"
#   loop: "{{ groups['masters'] }}"
#   when: item != remaining_master
#   ignore_errors: yes
# - name: Stop and disable kubelet on master nodes (except remaining master)
#   systemd:
#     name: kubelet
#     state: stopped
#     enabled: no
#   when: inventory_hostname in groups['masters'] and inventory_hostname != remaining_master
#
# - name: Remove Kubernetes components from master nodes (except remaining master)
#   package:
#     name:
#       - kubeadm
#       - kubelet
#       - kubectl
#     state: absent
#   when: inventory_hostname in groups['masters'] and inventory_hostname != remaining_master
#
# - name: Remove master nodes from cluster (except remaining master)
#   command: kubectl delete node {{ item }}
#   delegate_to: "{{ remaining_master }}"
#   loop: "{{ groups['masters'] }}"
#   when: item != remaining_master
#   ignore_errors: yes
#

#
# - name: Reset kubeadm on all nodes except remaining master
#   command: kubeadm reset -f
#   when: inventory_hostname != remaining_master
#
# - name: Remove Kubernetes directories
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - /etc/kubernetes
#     - /var/lib/kubelet
#     - /var/lib/etcd
#     - ~/.kube
#   when: inventory_hostname != remaining_master
#
# - name: Remove CNI directories
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - /etc/cni
#     - /opt/cni
#   when: inventory_hostname != remaining_master
#
# - name: Remove remaining Kubernetes components from the last master node
#   package:
#     name:
#       - kubeadm
#       - kubelet
#       - kubectl
#     state: absent
#   when: inventory_hostname == remaining_master
#
# - name: Reset kubeadm on the remaining master
#   command: kubeadm reset -f
#   when: inventory_hostname == remaining_master
#
# - name: Remove Kubernetes directories on the remaining master
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - /etc/kubernetes
#     - /var/lib/kubelet
#     - /var/lib/etcd
#     - ~/.kube
#   when: inventory_hostname == remaining_master
#
# - name: Remove CNI directories on the remaining master
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - /etc/cni
#     - /opt/cni
#   when: inventory_hostname == remaining_master
#
# - name: Remove iptables rules
#   command: iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
#
# - name: Remove ipvs rules
#   command: ipvsadm -C
#   ignore_errors: yes
#
# - name: Restart Docker service
#   systemd:
#     name: docker
#     state: restarted
#   ignore_errors: yes
#
# - name: Remove any leftover configuration files
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - /etc/systemd/system/kubelet.service.d
#     - /etc/systemd/system/kubelet.service
#     - /usr/lib/systemd/system/kubelet.service
#   
# - name: Reload systemd
#   systemd:
#     daemon_reload: yes
#
# - name: Reboot nodes
#   reboot:
